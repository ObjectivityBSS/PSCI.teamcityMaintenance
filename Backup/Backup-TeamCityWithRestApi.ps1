<#
The MIT License (MIT)

Copyright (c) 2015 Objectivity Bespoke Software Specialists

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#>

function Backup-TeamCityWithRestApi {
    <#
    .SYNOPSIS
    Creates a TeamCity backup using REST API. It includes all data that is available through REST API (no artifacts).

    .DESCRIPTION
    It authenticates using current Windows credentials.
    It blocks until backup finishes (no longer than $timeoutInHours internal variable) and ensures a new file has been created in $teamcityBackupDir.

    .PARAMETER Server
    TeamCity Server name (currently must be localhost).

    .PARAMETER TeamcityPaths
    Object containing information about TeamCity paths - generated by Get-TeamcityPaths.

    .PARAMETER TeamcityBackupPaths
    Object containing information about backup paths - generated by Get-TeamcityBackupPaths.

    .EXAMPLE
    Backup-TeamCityWithRestApi -Server $Server -TeamcityPaths $TeamcityPaths -TeamcityBackupPaths $TeamcityBackupPaths
    #>

    [CmdletBinding()]
    [OutputType([void])]
    param(
        [Parameter(Mandatory=$true)]
        [string] 
        $Server, 

        [Parameter(Mandatory=$true)]
        [PSCustomObject] 
        $TeamcityPaths, 
        
        [Parameter(Mandatory=$true)]
        [PSCustomObject] 
        $TeamcityBackupPaths
    )

    $timeoutInHours = 4
    $waitTimeBetweenRetriesInSeconds = 30
    $backupTeamCityRestBackupDir = $TeamcityBackupPaths.RestBackupDir
    
    $currentTeamcityBackupFiles = Get-ChildItem -Path $TeamcityPaths.TeamCityBackupDir | Where-Object { $_.FullName -match ".zip$" } | Select-Object -ExpandProperty FullName
    $webSession = Get-TeamCityRestSession -Server $Server

    if (!$webSession) {
         throw "Failed to pass a web session from Get-TeamCityRestSession."
    }

    $uri = "http://$Server/app/rest/server/backup?fileName=TeamCity_Backup&addTimestamp=true&includeConfigs=true&includeDatabase=true&includeBuildLogs=true&includePersonalChanges=true"
    Write-Log -Info "Starting TeamCity REST backup." -Emphasize
    $backupResponse = Invoke-WebRequestWrapper -Uri $uri -Method POST -WebSession $webSession

    Write-Log -Info "Backup started successfully. Will query for backup running state each $waitTimeBetweenRetriesInSeconds s."
    $secondsWaited = 0
    do {
        Start-Sleep -S $waitTimeBetweenRetriesInSeconds
        $secondsWaited += $waitTimeBetweenRetriesInSeconds
        $uri = "http://$Server/app/rest/server/backup"
        $backupResponse = Invoke-WebRequestWrapper -Uri $uri -Method GET -WebSession $webSession
        
    } while ($backupResponse.Content -ne "idle" -and $secondsWaited/3600 -le $timeoutInHours)
    if ($backupResponse.Content -ne "idle") {
        throw "TeamCity backup failed due to timeout."
    }
    $newTeamcityBackupFiles = Get-ChildItem -Path $TeamcityPaths.TeamCityBackupDir | Where-Object { $_.FullName -match ".zip$" } | Select-Object -ExpandProperty FullName
    if ($newTeamcityBackupFiles.Count - $currentTeamcityBackupFiles.Count -ne 1) {
        throw "Backup file has not been created at '$($TeamcityPaths.TeamCityBackupDir)' directory"
    }
    Write-Log -Info "Moving contents of directory '$($TeamcityPaths.TeamCityBackupDir)' to '$backupTeamcityRestBackupDir'"
    [void](New-Item -Path $backupTeamcityRestBackupDir -ItemType directory -Force)
    Move-Item -Path (Join-Path -Path $TeamcityPaths.TeamCityBackupDir -ChildPath "*") -Destination $backupTeamcityRestBackupDir
    Write-Log -Info "TeamCity backup from REST API succeeded."
}